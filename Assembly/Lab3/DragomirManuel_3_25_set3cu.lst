     1                                  ; Dragomir Manuel-Alexandru, gr. 213, 18.10.2015, tema lab3, problema 25
     2                                  ;  Interpretare fara semn
     3                                  ; (a*a+b+x)/(b+b)+c*c; a-word; b-byte; c-doubleword; x-qword
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      
    19 00000000 0200                        a dw 2
    20 00000002 FF                          b db -1
    21 00000003 04000000                    c dd 4
    22 00000007 0300000000000000            x dq 3
    23 0000000F 00000000                    y dd 0
    24 00000013 0000000000000000            aux dq 0
    25                                      
    26                                      ; (4-1+3)/(-2) + 16= 6/(-2) = -3 + 16 = 13 = D
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32 00000000 66A1[00000000]               mov ax, [a]
    33 00000006 668B1D[00000000]             mov bx, [a]
    34                                       
    35 0000000D 66F7EB                       imul bx; dx:ax = a*a
    36                                       
    37 00000010 66A3[0F000000]               mov word[y], ax;
    38 00000016 668915[11000000]             mov word[y+2], dx; y = a*a
    39                                       
    40 0000001D A0[02000000]                 mov al, [b];
    41 00000022 6698                         cbw
    42 00000024 98                           cwde; eax = b;
    43                                       
    44 00000025 8B1D[0F000000]               mov ebx, [y]; 
    45 0000002B 01D8                         add eax, ebx; eax = a*a + b 
    46                                       
    47 0000002D 99                           cdq;
    48                                       
    49 0000002E 0305[07000000]               add eax, dword[x];
    50 00000034 1315[0B000000]               adc edx, dword[x+4]; edx:eax = a*a + b + x
    51                                       
    52 0000003A A3[13000000]                 mov dword[aux], eax;
    53 0000003F 8915[17000000]               mov dword[aux+4], edx; aux = edx:eax = a*a + b + x
    54                                       
    55 00000045 A0[02000000]                 mov al, [b]
    56 0000004A 0205[02000000]               add al, [b]; al = b+b
    57                                       
    58 00000050 6698                         cbw;
    59 00000052 98                           cwde; eax = b+b
    60                                       
    61 00000053 89C3                         mov ebx, eax; ebx = b+b
    62 00000055 A1[13000000]                 mov eax, dword[aux];
    63 0000005A 8B15[17000000]               mov edx, dword[aux+4]; edx:eax = aux = a*a + b + x
    64                                       
    65 00000060 F7FB                         idiv ebx; eax = edx:eax / ebx = (a*a + b + x)/(b+b)
    66                                       
    67 00000062 A3[0F000000]                 mov [y], eax;  y = (a*a + b + x)/(b+b)
    68                                       
    69 00000067 A1[03000000]                 mov eax, [c];
    70 0000006C 8B1D[03000000]               mov ebx, [c];
    71                                       
    72 00000072 F7EB                         imul ebx; edx:eax = eax*ebx = c*c
    73                                       
    74 00000074 A3[13000000]                 mov dword[aux], eax;
    75 00000079 8915[17000000]               mov dword[aux+4], edx; aux = c*c
    76                                       
    77 0000007F A1[0F000000]                 mov eax, [y]
    78 00000084 99                           cdq;
    79                                       
    80 00000085 0305[13000000]               add eax, dword[aux];
    81 0000008B 1315[17000000]               adc edx, dword[aux+4]; edx:eax = rezultat
    82                                       
    83                                  
    84                                          
    85                                          
    86                                          
    87                                          ; exit(0)
    88 00000091 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 00000093 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
