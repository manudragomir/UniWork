     1                                  bits 32 
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, printf, scanf
     6                                       
     7                                  import exit msvcrt.dll
     8                                  import printf msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  
    11                                  
    12                                  segment data use32 class=data
    13 00000000 <res 00000014>                  primul_sir      resb       20
    14 00000014 <res 00000014>                  sir_suport      resb       20
    15 00000028 257300                          mod_string       db        '%s', 0
    16 0000002B 00                              true             db         0
    17 0000002C 416D20676173697400              mesaj            db         'Am gasit', 0
    18                                          
    19                                  
    20                                  segment code use32 class=code 
    21                                      subsecventa:
    22 00000000 8B7C2404                        mov edi, [esp + 4]; sir suport
    23 00000004 8B742408                        mov esi, [esp + 8]; primul sir
    24                                          
    25 00000008 89F3                            mov ebx, esi
    26 0000000A E848000000                      call lungime
    27 0000000F 89CA                            mov edx, ecx
    28                                          
    29                                          ; in edx am lungimea sirului esi
    30                                          
    31 00000011 89FB                            mov ebx, edi
    32 00000013 E83F000000                      call lungime
    33                                          
    34                                          ; in ecx am lungimea sirului edi
    35                                          
    36 00000018 B800000000                      mov eax, 0; indice pentru esi
    37 0000001D BB00000000                      mov ebx, 0; indice pentru edi
    38 00000022 C605[2B000000]00                mov byte [true], 0
    39                                          
    40                                          for1:
    41 00000029 BB00000000                          mov ebx, 0
    42                                              for2:
    43 0000002E 51                                      push ecx
    44 0000002F 8B0C1F                                  mov ecx, [edi+ebx]
    45 00000032 3B0C06                                  cmp ecx, [esi+eax]
    46 00000035 59                                      pop ecx
    47 00000036 7515                                    jne gatafor2
    48                                                  
    49 00000038 43                                      inc ebx
    50 00000039 40                                      inc eax
    51                                                  
    52 0000003A 39D3                                    cmp ebx, edx
    53 0000003C 7402                                    je am_gasit
    54 0000003E 7509                                    jne mai_incerc
    55                                                  
    56                                                  am_gasit:
    57 00000040 C605[2B000000]01                        mov byte [true], 1
    58 00000047 EB0B                                    jmp redi
    59                                                  
    60                                                  mai_incerc:
    61 00000049 39C8                                    cmp eax, ecx
    62 0000004B 75E1                                    jne for2
    63                                                  
    64                                              gatafor2:
    65 0000004D 40                                  inc eax
    66 0000004E 29D8                                sub eax, ebx
    67 00000050 39C8                                cmp eax, ecx; i == n
    68 00000052 75D5                                jne for1; 
    69                                          
    70                                          redi:
    71 00000054 C20800                          ret 8
    72                                          
    73                                      lungime:
    74                                          ;in ebx am un sir
    75 00000057 B900000000                      mov ecx, 0
    76 0000005C B000                            mov al, 0
    77                                          
    78                                          foru:
    79 0000005E 803C0B00                            cmp byte [ebx + ecx], 0
    80 00000062 7403                                je gata
    81                                              
    82 00000064 41                                  inc ecx
    83 00000065 EBF7                                jmp foru
    84                                          
    85                                          gata:
    86 00000067 C3                              ret
    87                                          
    88                                      start:
    89 00000068 68[00000000]                    push primul_sir
    90 0000006D 68[28000000]                    push mod_string
    91 00000072 FF15[00000000]                  call [scanf]
    92 00000078 83C408                          add esp, 4 * 2
    93                                          
    94                                          while_citire:
    95 0000007B 68[14000000]                        push sir_suport
    96 00000080 68[28000000]                        push mod_string
    97 00000085 FF15[00000000]                      call [scanf]
    98 0000008B 83C408                              add esp, 4 * 2
    99                                              
   100 0000008E 803D[14000000]30                    cmp byte [sir_suport], '0'
   101 00000095 742A                                je final
   102                                              
   103 00000097 68[00000000]                        push primul_sir
   104 0000009C 68[14000000]                        push sir_suport
   105 000000A1 E85AFFFFFF                          call subsecventa
   106                                              
   107 000000A6 803D[2B000000]01                    cmp byte [true], 1
   108 000000AD 7510                                jne continua
   109                                              
   110 000000AF 68[2C000000]                        push mesaj
   111 000000B4 68[28000000]                        push mod_string
   112 000000B9 FF15[00000000]                      call [printf]
   113                                              
   114                                              continua:
   115 000000BF EBBA                                jmp while_citire
   116                                              
   117                                              
   118                                          final:
   119                                          
   120                                          
   121                                          
   122 000000C1 6A00                            push    dword 0    
   123 000000C3 FF15[00000000]                  call    [exit]     
