     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 341278569000                a dw 1234h, 5678h, 90h
    15                                      len_a equ $ - a
    16 00000006 0400CDAB10002211            b dw 4h, 0abcdh, 10h, 1122h
    17                                      len_b equ $ - b
    18 0000000E 00<rept>                    c times 7 db 0
    19 00000015 FF                          x db -1
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                      
    26 00000000 FC                          cld; directia de parcurgere e crescatoare
    27 00000001 B903000000                  mov ecx, len_a / 2
    28 00000006 BE[00000000]                mov esi, a
    29 0000000B BF[0E000000]                mov edi, c
    30                                      
    31                                      repeta:
    32 00000010 66AD                            lodsw; ax = ds:esi
    33 00000012 AA                              stosb
    34 00000013 E2FB                        loop repeta
    35                                      
    36 00000015 B904000000                  mov ecx, len_b / 2
    37 0000001A BE[06000000]                mov esi, b
    38                                      
    39                                      repeta2:
    40 0000001F 66AD                            lodsw
    41 00000021 86C4                            xchg al, ah
    42 00000023 AA                              stosb
    43 00000024 E2F9                        loop repeta2
    44                                      
    45                                      
    46 00000026 B905000000                  mov ecx, 5
    47                                      
    48                                      FOR1:
    49 0000002B BE[0E000000]                    mov esi, c
    50 00000030 BF[0E000000]                    mov edi, c
    51 00000035 B201                            mov dl, 1
    52 00000037 51                              push ecx
    53 00000038 B906000000                      mov ecx, 6
    54                                          FOR2:
    55 0000003D 66AD                                lodsw
    56 0000003F 4E                                  dec esi
    57 00000040 38C4                                cmp ah, al
    58 00000042 7F0A                                jg E_OK
    59 00000044 86E0                                    xchg ah, al
    60 00000046 89F7                                    mov edi, esi
    61 00000048 4F                                      dec edi
    62 00000049 66AB                                    stosw
    63 0000004B 4F                                      dec edi
    64 0000004C B200                                    mov dl, 0
    65                                              E_OK:
    66 0000004E E2ED                                loop FOR2
    67                                              
    68 00000050 80FA00                          cmp dl, 0
    69 00000053 7503                            jne Final
    70                                          
    71 00000055 59                              pop ecx
    72 00000056 E2D3                            loop FOR1
    73                                          
    74                                          
    75                                       Final:
    76                                          
    77                                          
    78                                          
    79                                          
    80                                          
    81                                          
    82                                          
    83                                          
    84                                          
    85                                      
    86                                          
    87                                          
    88                                          
    89                                      
    90                                      
    91                                          ; exit(0)
    92 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    93 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
