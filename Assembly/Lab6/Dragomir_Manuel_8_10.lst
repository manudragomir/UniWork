     1                                  ;; Dragomir Manuel-Alexandru, gr. 213, 28.10.2015, tema lab8, problema 10
     2                                  ;Sa se citeasca de la tastatura un numar in baza 10 si sa se afiseze valoarea acelui numar in baza 16. 
     3                                  ;Exemplu: Se citeste: 28 se afiseaza: 1C
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll  
    12                                  import scanf msvcrt.dll 
    13                                  import printf msvcrt.dll  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 256400                      format db "%d", 0
    20 00000003 257300                      format1 db "%s", 0
    21 00000006 00                          n db 0
    22 00000007 00                          cat db 0
    23 00000008 00                          restu db 0 
    24 00000009 <res 00000005>              rez resb 5
    25 0000000E 00                          nr db 0
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31                                      
    32 00000000 68[06000000]                    push dword n
    33 00000005 68[00000000]                    push dword format
    34 0000000A FF15[00000000]                  call [scanf]
    35                                          
    36 00000010 83C408                          add esp, 4 * 2
    37                                          
    38 00000013 A0[06000000]                    mov al, [n]
    39 00000018 A2[07000000]                    mov [cat], al
    40 0000001D BF[09000000]                    mov edi, rez
    41                                          
    42                                          FOR1:
    43 00000022 FE05[0E000000]                      inc byte [nr]
    44 00000028 A0[07000000]                        mov al, [cat]; al = 28
    45 0000002D B400                                mov ah, 0; ah = 0
    46 0000002F B310                                mov bl, 16; bl = 16
    47                                              
    48 00000031 F6F3                                div bl
    49                                              
    50 00000033 86C4                                xchg al, ah; ah = cat, al = rest
    51                                              
    52 00000035 AA                                  stosb   ; v[nr] =   rest     
    53                                              
    54 00000036 80FC00                              cmp ah, 0
    55                                              
    56 00000039 7408                                je iesi
    57                                              
    58 0000003B 8825[07000000]                      mov [cat], ah
    59 00000041 EBDF                                jmp FOR1 
    60                                          
    61                                          iesi:
    62                                          
    63 00000043 BE[09000000]                    mov esi, rez
    64 00000048 0335[0E000000]                  add esi, [nr]
    65 0000004E 83EE01                          sub esi, byte 1
    66                                       
    67 00000051 FD                              std
    68 00000052 50                                  push dword eax
    69 00000053 68[00000000]                        push dword format
    70 00000058 FF15[00000000]                      call [printf]
    71 0000005E 83C408                              add esp, 4*2
    72                                          
    73                                          FOR2:
    74 00000061 B800000000                          mov eax, 0
    75 00000066 AC                                  lodsb
    76 00000067 3C0A                                cmp al, 10
    77 00000069 7D15                                jge next
    78                                              
    79 0000006B 3C00                                cmp al, 0
    80 0000006D 7C11                                jl next
    81                                              
    82 0000006F 50                                  push dword eax
    83 00000070 68[00000000]                        push dword format
    84 00000075 FF15[00000000]                      call [printf]
    85 0000007B 83C408                              add esp, 4*2
    86                                              
    87                                              
    88                                              
    89 0000007E EB42                                jmp en
    90                                                        
    91                                              
    92                                              next:
    93                                              
    94 00000080 3C0A                                cmp al, 10
    95 00000082 7414                                je mul10
    96 00000084 3C0B                                cmp al, 11
    97 00000086 7418                                je mul11
    98 00000088 3C0C                                cmp al, 12
    99 0000008A 7418                                je mul12
   100 0000008C 3C0D                                cmp al, 13
   101 0000008E 7418                                je mul13
   102 00000090 3C0E                                cmp al, 14
   103 00000092 7418                                je mul14
   104 00000094 3C0F                                cmp al, 15
   105 00000096 7418                                je mul15
   106                                              
   107                                              mul10:
   108 00000098 B841000000                          mov eax, 'A'
   109 0000009D 50                                  push eax
   110 0000009E EB22                                jmp en
   111                                              
   112                                              mul11:
   113 000000A0 6A42                                push dword 'B'
   114 000000A2 EB1E                                jmp en
   115                                              
   116                                              mul12:
   117 000000A4 6A43                                push dword 'C'
   118 000000A6 EB1A                                jmp en
   119                                              
   120                                              mul13:
   121 000000A8 6A44                                push dword 'D'
   122 000000AA EB16                                jmp en
   123                                              
   124                                              mul14:
   125 000000AC 6A45                                push dword 'E'
   126 000000AE EB12                                jmp en
   127                                              
   128                                              mul15:
   129 000000B0 6A46                                push dword 'F'
   130 000000B2 EB0E                                jmp en
   131                                              
   132 000000B4 68[03000000]                        push format1
   133 000000B9 FF15[00000000]                      call [printf]
   134 000000BF 83C408                              add esp, 4*2
   135                                              
   136                                              en:
   137                                              
   138 000000C2 FE0D[0E000000]                      dec byte [nr]
   139 000000C8 A0[0E000000]                        mov al, [nr]
   140 000000CD 3C00                                cmp al, 0
   141 000000CF 7402                                je endi
   142                                              
   143 000000D1 EB8E                                jmp FOR2
   144                                              
   145                                              
   146                                             endi:
   147                                          
   148                                          
   149                                          
   150                                          ; exit(0)
   151 000000D3 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   152 000000D5 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
