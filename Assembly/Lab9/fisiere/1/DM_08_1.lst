     1                                  bits 32
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, fread, printf, fopen, fclose     
     6                                  
     7                                  import exit msvcrt.dll   
     8                                  import fread msvcrt.dll   
     9                                  import printf msvcrt.dll   
    10                                  import fopen msvcrt.dll   
    11                                  import fclose msvcrt.dll   
    12                                  
    13                                  segment data use32 class=data
    14 00000000 <res 00000004>              descriptor_fisier   resd    1
    15 00000004 766F63616C652E7478-         nume_fisier          db      'vocale.txt', 0
    15 0000000D 7400               
    16 0000000F 7200                        mod_acces            db      'r', 0
    17 00000011 <res 00000064>              bloc                resb        100
    18 00000075 00000000                    nr_vocale            dd     0
    19 00000079 256400                      format_afisare       db      '%d', 0
    20 0000007C 6165696F7500                string_vocale        db      'aeiou', 0
    21                                      
    22                                  
    23                                  segment code use32 class=code
    24                                      start:
    25                                      ;deschidem fisierul
    26 00000000 68[0F000000]                    push mod_acces
    27 00000005 68[04000000]                    push nume_fisier
    28 0000000A FF15[00000000]                  call [fopen]
    29 00000010 83C408                          add esp, 4 * 2
    30                                          
    31                                      ;ne intrebam daca s-a deschis cu succes si salvam descriptor_fisier daca da
    32 00000013 83F800                          cmp eax, 0
    33 00000016 7467                            je final_program
    34                                          
    35 00000018 A3[00000000]                    mov [descriptor_fisier], eax
    36                                          
    37                                      ;citim cate un bloc de 100 de litere
    38                                          
    39                                      while1:
    40 0000001D FF35[00000000]                  push dword [descriptor_fisier]
    41 00000023 6A64                            push dword 100
    42 00000025 6A01                            push dword 1
    43 00000027 68[11000000]                    push bloc
    44 0000002C FF15[00000000]                  call [fread]
    45                                          
    46 00000032 89C1                            mov ecx, eax
    47 00000034 E329                            jecxz afisare
    48 00000036 BE[11000000]                    mov esi, bloc
    49 0000003B FC                              cld
    50                                          
    51                                          for2:
    52 0000003C AC                                  lodsb; in al vom avea caracterul curent
    53                                              
    54 0000003D BF[7C000000]                        mov edi, string_vocale; punem in destinatie strigul de vocale
    55                                              
    56 00000042 51                                  push ecx
    57 00000043 B905000000                          mov ecx, 5
    58                                              
    59                                              for3:
    60 00000048 AE                                      scasb
    61                                                  
    62 00000049 7508                                    jnz reexecuta
    63 0000004B FF05[75000000]                          inc dword [nr_vocale]
    64 00000051 EB02                                    jmp am_gasit
    65                                                  
    66                                                  reexecuta:
    67 00000053 E2F3                                    loop for3
    68                                                  
    69                                              am_gasit:
    70 00000055 59                                  pop ecx
    71 00000056 E2E4                                loop for2
    72                                          
    73                                          
    74 00000058 83F864                          cmp eax, 100
    75 0000005B 7202                            jb afisare
    76                                          
    77 0000005D EBBE                            jmp while1
    78                                          
    79                                      
    80                                      ;functia de afisare
    81                                      afisare:
    82 0000005F FF35[75000000]                  push dword [nr_vocale]
    83 00000065 68[79000000]                    push format_afisare
    84 0000006A FF15[00000000]                  call [printf]
    85                                          
    86                                      ;inchidem fisierul
    87 00000070 FF35[00000000]                  push dword [descriptor_fisier]
    88 00000076 FF15[00000000]                  call [fclose]
    89 0000007C 83C404                          add esp, 4 * 1
    90                                      
    91                                      
    92                                          final_program:
    93                                      
    94                                          
    95 0000007F 6A00                            push    dword 0      
    96 00000081 FF15[00000000]                  call    [exit]       
