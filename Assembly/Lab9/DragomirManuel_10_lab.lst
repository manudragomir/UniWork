     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fread, fopen, fclose, scanf, printf, fscanf            ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll  
     9                                  import fread msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import fscanf msvcrt.dll  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    20 00000009 7400               
    21 0000000B 256400                      format_int db "%d", 0
    22 0000000E 257300                      format_string db "%s", 0
    23 00000011 256300                      format_caracter db "%c", 0
    24 00000014 7200                        mod_acces db "r", 0
    25 00000016 <res 00000004>              n resd 1
    26 0000001A <res 00000004>              nr resd 1
    27                                      len equ 5
    28 0000001E <res 00000004>              x resd 1
    29 00000022 <res 0000000A>              descriptor_file resb 10
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35 00000000 68[14000000]                    push dword mod_acces
    36 00000005 68[00000000]                    push dword nume_fisier
    37 0000000A FF15[00000000]                  call [fopen]
    38 00000010 83C408                          add esp, 4 * 2
    39                                          
    40 00000013 A3[22000000]                    mov [descriptor_file], eax
    41 00000018 83F800                          cmp eax, 0
    42 0000001B 0F84E7000000                    je final
    43                                          
    44 00000021 68[16000000]                    push dword n
    45 00000026 68[0B000000]                    push dword format_int
    46 0000002B FF35[22000000]                  push dword [descriptor_file]
    47 00000031 FF15[00000000]                  call [fscanf]
    48 00000037 83C40C                          add esp, 4*3
    49                                         
    50 0000003A A1[16000000]                    mov eax, [n]
    51                                          
    52                                          loop1:
    53 0000003F 68[1E000000]                        push dword x
    54 00000044 68[0B000000]                        push dword format_int
    55 00000049 FF15[00000000]                      call [scanf]
    56 0000004F 83C408                              add esp, 4 * 2
    57                                              
    58 00000052 A1[1E000000]                        mov eax, [x]
    59 00000057 83F800                              cmp eax, 0
    60                                              
    61 0000005A 0F8CA8000000                        jl final
    62                                              
    63 00000060 A1[16000000]                        mov eax, [n]
    64 00000065 3B05[1E000000]                      cmp eax, [x]
    65 0000006B 7ED2                                jle loop1
    66                                              
    67                                              
    68                                              ;incepem citirea linie cu linie
    69                                              ;deschidem fisierul
    70                                              
    71 0000006D 68[14000000]                        push dword mod_acces
    72 00000072 68[00000000]                        push dword nume_fisier
    73 00000077 FF15[00000000]                      call [fopen]
    74 0000007D 83C408                              add esp, 4 * 2
    75                                              
    76 00000080 A3[22000000]                        mov [descriptor_file], eax
    77 00000085 83F800                              cmp eax, 0
    78 00000088 747E                                je final
    79                                              
    80                                              ; am deschis fisierul iar acum numaram sa fie x endline-uri citind litera cu litera din fisier
    81                                              
    82 0000008A 8B1D[1E000000]                      mov ebx, [x]; in ebx avem nr de endline-uri
    83 00000090 83C301                              add ebx, 1
    84                                              looop:
    85 00000093 FF35[22000000]                          push dword [descriptor_file]
    86 00000099 6A01                                    push dword 1
    87 0000009B 6A01                                    push dword 1
    88 0000009D 68[1A000000]                            push nr
    89 000000A2 FF15[00000000]                          call [fread]
    90 000000A8 83C410                                  add esp, 4*4
    91                                                  
    92 000000AB A1[1A000000]                            mov eax, [nr]
    93 000000B0 83F80A                                  cmp eax, 10
    94                                                  
    95 000000B3 7508                                    jne endul
    96                                                  
    97 000000B5 83EB01                                  sub ebx, 1
    98                                                  
    99 000000B8 83FB00                                  cmp ebx, 0
   100 000000BB 7402                                    je afisare
   101                                                  
   102                                                  
   103                                                  endul
   103          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   104 000000BD EBD4                                    jmp looop
   105                                              
   106                                                  ; aici vom incepe afisarea liniei cu pricina
   107                                              afisare:    
   108 000000BF FF35[22000000]                          push dword [descriptor_file]
   109 000000C5 6A01                                    push dword 1
   110 000000C7 6A01                                    push dword 1
   111 000000C9 68[1A000000]                            push nr
   112 000000CE FF15[00000000]                          call [fread]
   113 000000D4 83C410                                  add esp, 4*4
   114                                                  
   115 000000D7 FF35[1A000000]                          push dword [nr]
   116 000000DD 68[11000000]                            push format_caracter
   117 000000E2 FF15[00000000]                          call [printf]
   118 000000E8 83C408                                  add esp, 4 * 2
   119                                                  
   120 000000EB A1[1A000000]                            mov eax, [nr]
   121 000000F0 83F80A                                  cmp eax, 10
   122                                                  
   123 000000F3 7402                                    je finl
   124 000000F5 EBC8                                    jmp afisare
   125                                              
   126                                              
   127                                              finl:
   128                                              ;inchidem fisierul
   129 000000F7 FF35[22000000]                      push dword [descriptor_file]
   130 000000FD FF15[00000000]                      call [fclose]
   131                                              
   132                                              
   133 00000103 E937FFFFFF                          jmp loop1
   134                                          
   135                                          
   136                                          
   137                                          final:
   138                                          ; exit(0)
   139 00000108 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   140 0000010A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
